{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"A-Frame TypeScript","text":"<p>This page is overridden in .overrides</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#080-alpha-version","title":"0.8.0 Alpha version","text":"<p>Initial version of the A-Frame TypeScript tools.</p>"},{"location":"faq/","title":"Frequently Asked Questions (FAQ)","text":""},{"location":"faq/#why-not-improve-typesaframe-instead","title":"Why not improve <code>@types/aframe</code> instead?","text":"<p>The goal of this project is to provide the best developer experience when working with A-Frame and TypeScript. To achieve this the typings in this project can differ from what they technically are or in a few cases even require the use of helper functions. This would not fit the DefinitelyTyped project.</p> <p>Having our own provided typings also allows for faster iterations and including documentation directly in the typings.</p>"},{"location":"faq/#do-i-need-to-use-typescript-can-i-just-use-the-docs-generator-or-the-vs-code-extension","title":"Do I need to use TypeScript? Can I just use the docs generator or the VS code extension?","text":"<p>The focus of the project is on using TypeScript. It's these typings along with TSDoc that enable a lot of the surrounding tooling. That isn't to say everything needs to be TypeScript. The following hybrid situations are all supported:</p> <ul> <li>Create typings  for an existing A-Frame library written in JavaScript </li> <li>Publishing a library  that others can use in their A-Frame project </li> <li>Using existing A-Frame libraries  in your TypeScript A-Frame application </li> </ul> <p>The typings might also work when in a plain JavaScript project. This hasn't been explored and isn't the focus, but if you're interested in this do reach out.</p>"},{"location":"faq/#why-does-the-generator-use-x","title":"Why does the generator use X?","text":"<p>The project is opinionated so the tools, frameworks and defaults are all chosen to \"just work\". A lot of the tools can easily be swapped out, and you're free to do so. The generator templates, however, will most likely not offer the user any choices in this regard to make testing and maintaining the project easier.</p>"},{"location":"about/","title":"About","text":"<p>This project aims to make working with A-Frame and TypeScript a pleasant experience. The main goals of the project are:</p> <ul> <li>Typing with minimal helpers: Getting all of the benefits of TypeScript while still writing idiomatic A-Frame code (just like you're used to)</li> <li>Interoperability: Easily use many of the pre-existing A-Frame components out there, or publish your own A-Frame components for anyone to use (even if they don't use TypeScript!)</li> <li>Documentation: Provide quick access to documentation of core and community components, systems and primitives as well as easily creating documentation for your own components.</li> <li>Opinionated Tooling: Enhance the developer experience by providing a combination of tools that \"just work\". Easily scaffold new projects all setup to easily develop and publish them. </li> </ul>"},{"location":"about/contact/","title":"Contact","text":"<p>If you want to learn more about the project or give feedback, feel free to reach out:</p> <ul> <li>Twitter: @noerihuisman</li> <li>Mastodon: @arvr.social@noerihuisman</li> <li>E-mail: aframe-typescript@fern.solutions</li> <li>Discord: <code>serpentrider#0670</code></li> </ul>"},{"location":"about/contact/#bugs-and-feature-requests","title":"Bugs and feature requests","text":"<p>The best place to report bugs and request features is on the GitHub repository. It's a mono-repository containing all parts of this project, so be sure to properly indicate the relevant components in your issue.</p>"},{"location":"about/contact/#spot-a-mistake-on-the-website","title":"Spot a mistake on the website?","text":"<p>If you see any typos, mistakes or dead links on this website, please open an issue on the aframe-typescript-site GitHub repository. You're also more than welcome to submit PRs to this repository, especially for small fixes like typos or incorrect links. :-)</p>"},{"location":"guides/","title":"Getting started","text":"<p>To get started with A-Frame TypeScript, start by creating either an app or a library:</p> <ul> <li>Creating an A-Frame TypeScript app</li> <li>Creating an A-Frame TypeScript library</li> </ul>"},{"location":"guides/consuming-lib/","title":"Consuming existing libs","text":""},{"location":"guides/create/app/","title":"Creating an App","text":"<p>Creating an app can easily be done using the A-Frame Typescript generators.</p>"},{"location":"guides/create/app/#1-install-yeoman-and-the-generator-aframe-typescript","title":"1. Install <code>yeoman</code> and the <code>generator-aframe-typescript</code>","text":"<p>A-Frame Typescript uses Yeoman for scaffolding new projects. The generator is available from NPM and can be installed using the following command. <pre><code>npm install -g yeoman generator-aframe-typescript\n</code></pre></p>"},{"location":"guides/create/app/#2-run-the-generator","title":"2. Run the generator","text":"<p>Once installed you can run the generator to start the scaffolding <pre><code>yo aframe-typescript\n</code></pre> You will be asked some questions like the apps name.</p>"},{"location":"guides/create/app/#3-running-the-app","title":"3. Running the app","text":"<p>Once generated, you're all ready to go. Open up the folder in VS Code and use <code>yarn dev</code> to take your newly created A-Frame + TypeScript app for a spin.</p>"},{"location":"guides/create/lib/","title":"Creating a Library","text":"<p>Creating a library can easily be done using the A-Frame Typescript generators.</p>"},{"location":"guides/create/lib/#1-install-yeoman-and-the-generator-aframe-typescript","title":"1. Install <code>yeoman</code> and the <code>generator-aframe-typescript</code>","text":"<p>A-Frame Typescript uses Yeoman for scaffolding new projects. The generator is available from NPM and can be installed using the following command. <pre><code>npm install -g yeoman generator-aframe-typescript\n</code></pre></p>"},{"location":"guides/create/lib/#2-run-the-generator","title":"2. Run the generator","text":"<p>Once installed you can run the generator to start the scaffolding <pre><code>yo aframe-typescript:lib\n</code></pre> You will be asked some questions like the libraries name.</p>"},{"location":"guides/create/lib/#3-running-the-app","title":"3. Running the app","text":"<p>Once generated, you're all ready to go. Open up the folder in VS Code and use <code>yarn dev</code> to take your newly created A-Frame + TypeScript app for a spin.</p>"},{"location":"guides/create/typings/","title":"Creating typings for an existing library","text":""},{"location":"reference/component/","title":"Components","text":"<p>A-Frame allows creating your own components. This is done using the <code>registerComponent</code> method. In aframe-typescript this is no different, but</p> A-Frame + TypeScript A-Frame  <pre><code>import * as AFRAME from 'aframe';\nexport const FooComponent = AFRAME.registerComponent('foo', {\nschema: {\nbar: {type: 'number'},\nbaz: {type: 'string'}\n},\ninit: function() {\n// Do something when component first attached.\n},\ntick: function(time, timeDelta) {\n// Do something on every scene tick or frame.\n}\n});\ndeclare module \"aframe\" {\nexport interface Components {\n\"foo\": InstanceType&lt;typeof FooComponent&gt;\n}\n}\n</code></pre> <pre><code>AFRAME.registerComponent('foo', {\nschema: {\nbar: {type: 'number'},\nbaz: {type: 'string'}\n},\ninit: function() {\n// Do something when component first attached.\n},\ntick: function(time, timeDelta) {\n// Do something on every scene tick or frame.\n}\n});\n</code></pre>"},{"location":"reference/component/#lax-and-strict-components","title":"Lax and Strict components","text":"<p>By default components that are registered are \"lax\". With lax components you still get typing based on the schema, but the <code>this</code> type of a component allows new properties to be added inside of the function. This is commonly done in the <code>init()</code> function to define some instance variables like event handlers. The downside of this approach is that TypeScript can't infer any types for these properties. So anything initialized this way in <code>init()</code> will appear as <code>any</code> type in the other function.</p> <p>A-Frame TypeScript provides a helper to define a \"strict\" component instead. This is done using the <code>strict</code> helper. See the comparison below between a (standard) \"lax\" component and a \"strict\" component:</p> Lax Component Strict Component  <pre><code>import * as AFRAME from 'aframe';\nimport * as THREE from 'three';\nexport const FooComponent = AFRAME.registerComponent('foo', {\nschema: {\ncolor: {type: 'color'},\n},\ninit: function() {\n// Create a new instance of THREE.Color to use during update calls\nthis.color = new THREE.Color();\n},\nupdate: function(oldData) {\n// Check if the color property has changed\nif(oldData.color !== this.data.color) {\n// Parse the color and dim it\nthis.color.set(this.data.color).multiplyScaler(0.5);\n// Apply the color to the material component\nthis.el.setAttribute('material', 'color', this.color);\n}\n}\n});\n</code></pre> <pre><code>import * as AFRAME from 'aframe';\nimport * as THREE from 'three';\nimport { strict } from 'aframe-typescript'; // (1)!\nexport const FooComponent = AFRAME.registerComponent('foo', /* (2)! */strict&lt;{\n/* Color object used for parsing incoming color values */\ncolor: THREE.Color /* (3)! */\n}&gt;().component({\nschema: {\ncolor: {type: 'color'},\n},\ninit: function() {\n// Create a new instance of THREE.Color to use during update calls\nthis.color = new THREE.Color();\n},\nupdate: function(oldData) {\n// Check if the color property has changed\nif(oldData.color !== this.data.color) {\n// Parse the color and dim it\nthis.color.set(this.data.color).multiplyScaler(0.5);\n// Apply the color to the material component\nthis.el.setAttribute('material', 'color', this.color);\n}\n}\n})); /* (4)! */\n</code></pre> <ol> <li>Helpers are part of the <code>aframe-typescript</code> package</li> <li>Don't be fooled by the formatting, it's just two method invocations <code>strict&lt;{...}&gt;().component({...})</code></li> <li>Since each property is now specified, documentation strings can be provided for them</li> <li>Don't forget the additional closing brace!</li> </ol>"},{"location":"reference/event/","title":"Events","text":"A-Frame + TypeScript  <pre><code>import * as AFRAME from 'aframe';\ndeclare module \"aframe\" {\nexport interface EntityEvents {\n\"eventname\": DetailEvent&lt;{degrees: number, source: Entity/* (1)! */}&gt;,\n}\n}\n</code></pre> <ol> <li>The type parameter of DetailEvent represents the type of the <code>detail</code> property on the emitted events. They can be anything you want</li> </ol>"},{"location":"reference/geometry/","title":"Geometries","text":"<p>Coming soon</p>"},{"location":"reference/primitive/","title":"Primitives","text":"A-Frame + TypeScript A-Frame  <pre><code>import * as AFRAME from 'aframe';\nexport const FooPrimitive = AFRAME.registerPrimitive('foo', {\ndefaultComponents: {\n\"foo\": { bar: 42 },\n},\nmappings: {\nbaz: 'foo.baz',\n}\n});\ndeclare module \"aframe\" {\nexport interface Primitives {\n\"foo\": typeof FooPrimitive /* (1)! */\n}\n}\n</code></pre> <ol> <li>Note: in constrast to systems and components the type is specified here, not the <code>InstanceType&lt;typeof FooPrimitive&gt;</code>!</li> </ol> <pre><code>AFRAME.registerPrimitive('foo', {\ndefaultComponents: {\n\"foo\": { bar: 42 },\n},\nmappings: {\nbaz: 'foo.baz',\n}\n});\n</code></pre>"},{"location":"reference/shader/","title":"Shaders","text":"<p>Coming soon</p>"},{"location":"reference/system/","title":"Systems","text":"A-Frame + TypeScript A-Frame  <pre><code>import * as AFRAME from 'aframe';\nexport const FooSystem = AFRAME.registerSystem('foo', {\nschema: {\nbar: {type: 'number'},\nbaz: {type: 'string'}\n},\ninit: function() {\n// Do something when system initializes.\n},\ntick: function(time, timeDelta) {\n// Do something on every scene tick or frame.\n}\n});\ndeclare module \"aframe\" {\nexport interface Systems {\n\"foo\": InstanceType&lt;typeof FooSystem&gt;\n}\n}\n</code></pre> <pre><code>AFRAME.registerSystem('foo', {\nschema: {\nbar: {type: 'number'},\nbaz: {type: 'string'}\n},\ninit: function() {\n// Do something when system initializes.\n},\ntick: function(time, timeDelta) {\n// Do something on every scene tick or frame.\n}\n});\n</code></pre>"},{"location":"roadmap/","title":"Roadmap","text":"<p>The project is currently in an Alpha phase. If you're interested in trying it out or learning more about it, please reach out (social links in footer below). If you'd rather try things out on your own, feel free to do so. Any feedback is greatly appreciated.</p>"},{"location":"roadmap/#08-alpha","title":"0.8 Alpha","text":"<p>The 0.8.x versions are part of the alpha phase. The goal of this phase is to get all elements of aframe-typescript in a functional state, so that it can be thoroughly tested and experimented with. Since it's likely that things might still change significantly, it's not intended for production use (yet)</p> Component Goal aframe-types <ul><li>Typings for all A-Frame core components, systems, primitives, shaders and geometries</li><li>Documentation for all components, systems and properties available</li><li>Handling of dynamic schema in components and systems</li></ul> typescript-helpers <ul><li>Helpers for common A-Frame patterns (IIFE methods, merging definitions)</li></ul> docs-generator <ul><li>Parsing of TsDoc (using TypeDoc) and converting to intermediate representation</li><li>Generating basic reference pages for Components, Systems and Primitives</li></ul> generators <ul><li>Generator for an A-Frame TypeScript app (dev, build, docs)</li><li>Generator for an A-Frame TypeScript library (dev, build, docs, publish)</li></ul> vscode-extension <ul><li>Basic auto completion</li><li>Hover information in HTML files (primitives and components)</li><li>Jump to definition from HTML to TypeScript</li></ul>"},{"location":"roadmap/#09-beta","title":"0.9 Beta","text":"<p>Once the core elements are solidified (specifically the typings) the project moves into the Beta phase. At this point the main typings and <code>aframe-typescript</code> helpers shouldn't change much. Projects can start using A-Frame TypeScript and publishing typings for their A-Frame libraries/components. The focus of the project becomes improving the tooling, developer experience and fixing any bugs encountered during this phase before the stable release.</p> Component Goal aframe-types <ul><li>Typings for popular and commonly used A-Frame components, systems, primitives, shaders and geometries</li></ul> docs-generator <ul><li>Embedded live examples (tentative)</li><li>Cross library references/linking (tentative)</li></ul> generators <ul><li>Expand app generator with testing setup (unit and integration)</li><li>Expand lib generator with testing setup (unit and integration)</li></ul> vscode-extension <ul><li>Error checking (unknown components, incorrect types, etc...)</li><li>Syntax highlighting for component attribute values (<code>key: value, texture: url(./tex.png)</code>)</li></ul>"},{"location":"roadmap/#10-stable","title":"1.0 Stable","text":"<p>Stable releases won't see many changes to the typings or helpers (for backwards compatibility). Typings will be updated to match newer A-Frame and, by extension, Three.js versions. TypeScript updates might also be incorporated, though on the condition that it doesn't break already published typings.</p> <p>The surrounding tooling (generators, docs-generator and vscode-extension) will be continuously improved by fixing bugs and expanding functionality. The scope of the project might also be expanded at this point to facilitate integrations with popular frontend frameworks.</p>"},{"location":"roadmap/#past-releases","title":"Past releases","text":"<p>For past releases, including detailed list of changes, see the Changelog.</p>"}]}